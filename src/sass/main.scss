$color-primary-light: #7ed56f;
$color-primary: #55c57a;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-black: #000;
$color-white: #fff;

//This is the only reset that he uses
*,
*::after,
*::before {
    margin: 0;
    padding: 0;

    // We have set box-sizing in the body, so everything else
    // will now inherit that setting
    box-sizing: inherit;
}

html {
    // We make the base 10px to make the math easy - 1rem = 10px
    // But, making in 10px here would mean that the user couldn't override
    // By setting a percentage here, it takes from the browser value which
    // by default is 16px unless the user overrides.

    // This value represents the math to get to the equivalent 10px
    font-size: 62.5%;
}

body {
    box-sizing: border-box;
    font-family: "Lato", sans-serif;
    font-weight: 400;
    // font-size: 16px;
    line-height: 1.7;
    color: $color-grey-dark;
    padding: 3rem;
}

.header {
    height: 95vh;
    background-image: linear-gradient(
            to right bottom,
            rgba($color-primary-light, 0.4),
            rgba($color-primary-dark, 0.8)
        ),
        url(../img/hero.jpg);
    background-size: cover;
    // The top of the image will never get cropped
    background-position: top;

    // This defines what will get kept
    // We are starting at the top left and then moving clockwise
    // https://bennettfeely.com/clippy/ for an easy way to create paths
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

    position: relative;

    // Interesting that & is actually being replaced with .header so this works
    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 4rem;
    }

    &__logo {
        // The width will change automatically when setting the height
        height: 3.5rem;
    }

    &__text-box {
        position: absolute;
        // This is a very easy way to center something
        // This is 40% of the parent element
        top: 40%;
        left: 50%;
        // This is 50% of .text-box
        transform: translate(-50%, -50%);

        // See the notes below for .btn
        text-align: center;
    }
}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;

    // His animation in Safari had a little jump at the end and this fixes that
    // in a way this is like culling in 3D
    backface-visibility: hidden;

    margin-bottom: 6rem;

    &--main {
        // Block element take up all the width available to them
        display: block;
        font-size: 6rem;
        font-weight: 400;
        letter-spacing: 3.5rem;

        animation-name: moveRight;
        animation-duration: 2s;

        // other options
        // animation-delay: 3s;
        // animation-iteration-count: 3;

        // https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function
        animation-timing-function: ease-in-out;
    }

    &--sub {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.75rem;

        animation: moveLeft 2s ease-in-out;
    }
}

@keyframes moveRight {
    0% {
        opacity: 0;
        transform: translateX(-10rem) rotate(30deg);
    }

    80% {
        // overshoot
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        // return it to the start
        transform: translate(0);
    }
}

@keyframes moveLeft {
    0% {
        opacity: 0;
        transform: translateX(10rem) rotate(-30deg);
    }

    80% {
        // overshoot
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        // return it to the start
        // it doesn't appear that this is necessary
        transform: translate(0);
    }
}

@keyframes moveUp {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        // return it to the start
        // it doesn't appear that this is necessary
        transform: translate(0);
    }
}

.btn {
    // psuedo classes are a special state of a selector
    // link is when it is a link that has not been visited before
    // here we have both so there is no difference in their styling
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        // vertical and horizontal
        padding: 1.5rem 4rem;
        border-radius: 999px;
        display: inline-block;
        transition: all 0.2s;
        box-shadow: 0 0.5rem 0.5rem rgba($color-black, 0.3);
        font-size: 1.6rem;

        // This is so that our ::after element can have position: absolute;
        position: relative;

        // CENTERING THE BUTTON
        // This is one way to do it:
        // position: absolute;
        //left: 50%;
        //transform: translateX(-50%);

        // Here's an easier way:
        // because this element is inline-block it is treated as though it is text
        // so all we have to do is set .text-box text-align to center
    }

    &:hover {
        transform: translateY(-0.5rem);
        box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

        &::after {
            transform: scaleX(1.4) scaleY(1.6);
            opacity: 0;
        }
    }

    // This is for when we have clicked the button
    &:active {
        // This is related to the intitial state
        transform: translateY(-0.3rem);
        box-shadow: 0 0.8rem 1rem rgba($color-black, 0.25);
    }

    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }

    // This creates a virtual element after .btn that you can style
    &::after {
        // You have to specify the content or nothing is going to appear
        content: "";
        display: inline-block;

        // This will make it the same size as the button as this element is treated like a child of the &
        height: 100%;
        width: 100%;
        border-radius: 999px;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all 0.4s;
    }

    &--animated {
        animation: moveUp 0.5s ease-out 1s;
        // This means that it will apply the styles of the 0% prior to running
        // otherwise the button starts off visible
        animation-fill-mode: backwards;
    }
}
